{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-37581591-1","tagline":"minimal effort ui for your backbone models","name":"Backbone.gui","body":"# backbone.gui\r\n\r\nbackbone.gui is a simple way to create interfaces for your Backbone models. aiming for simplicity, this relies solely on html5 input elements.\r\n\r\n## including backbone.gui\r\n\r\nloading backbone.gui relies on requirejs. simply clone backbone.gui into your project repository and create the path in your requirejs config. if you cloned into `lib/backbone.gui`, it would look something like this:\r\n\r\n```\r\ngui: 'lib/backbone.gui/src/gui'\r\n```\r\n\r\n## using components\r\n\r\ngui components are all extended from Backbone views. they all accept a `model` option, which they will bind user input to. most components have a `property` option which defines what model property the input should bind to, and many components have an `options` parameter to define further gui attributes. consider the following model definition for all examples:\r\n\r\n```\r\ndefine 'user', [\r\n  'backbone'\r\n], (Backbone) ->\r\n  \r\n  User = class extends Backbone.Model\r\n    defaults:\r\n      admin: null\r\n      username: null\r\n      age: null\r\n\r\n    greet: ->\r\n      console.log 'hello, ', @get('username')\r\n\r\n  new User\r\n    admin: false\r\n    username: 'nic'\r\n    age: 24\r\n```\r\n\r\n### Text Input\r\n\r\nfor strings.\r\n\r\n```\r\ndefine 'user', [\r\n  'zepto',\r\n  'user',\r\n  'gui/text'\r\n], ($, user, TextView) ->\r\n\r\n  username_view = new TextView\r\n    model: user\r\n    property: 'username'\r\n\r\n  $ ->\r\n    $body = $('body')\r\n    $body.append username_view.render().el\r\n```\r\n\r\n### Range Input\r\n\r\nfor integers. additionally accepts `min`, `max`, and `step` options for input attributes.\r\n\r\n```\r\nage_view = new RangeView\r\n  model: user\r\n  property: 'age'\r\n  min: 0\r\n  max: 150\r\n```\r\n\r\n### Select Dropdown\r\n\r\nfor strings. accepts an `options` array for possible dropdown values.\r\n\r\n```\r\nusername_view = new SelectView\r\n  model: user\r\n  property: 'username'\r\n  options: ['catshirt', 'nic', 'cool-guy-247']\r\n```\r\n\r\n### Checkbox Input\r\n\r\nfor booleans.\r\n\r\n```\r\nadmin_view = new CheckboxView\r\n  model: user\r\n  property: 'admin'\r\n```\r\n\r\n### Button\r\n\r\nfor instance methods. unlike other components, this does not accept a `property` and instead accepts a `method`, which is the name of an instance method to trigger.\r\n\r\n```\r\ngreet_view = new ButtonView\r\n  model: user\r\n  method: 'greet'\r\n```"}